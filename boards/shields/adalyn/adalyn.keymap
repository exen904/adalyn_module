#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <locale/keys_de.h>

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
};


/ {

    combos {
       compatible = "zmk,combos";
        /* Top corners (Q+P) = bootloader */
        combo_boot {
            key-positions = <0 9>;
            bindings = <&bootloader>;
        };
       
       combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
       };
       combo_caps {
            timeout-ms = <50>;
            key-positions = <10 19>;
            bindings = <&caps_word>;
       };
       combo_singlequote {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp SINGLE_QUOTE>;
       };
       combo_doublequote {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp DOUBLE_QUOTES>;
       };
       combo_minus {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp MINUS>;
       };
       combo_plus {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp PLUS>;
       };
       combo_equal {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp EQUAL>;
       };
       combo_underscore {
            timeout-ms = <50>;
            key-positions = <16 17 18>;
            bindings = <&kp UNDERSCORE>;
       };

    };

    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            //flavor = "hold-preferred";
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <160>;
            //quick-tap-ms = <100>;
            //hold-while-undecided;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            //flavor = "hold-preferred";
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <160>;
            //hold-while-undecided;
            //quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        // ------------------------------------------------------------------------------------------------------
// |    0    |    1    |    2    |    3    |    4    |    5    |    6    |    7    |    8    |    9    |
// |   10    |   11    |   12    |   13    |   14    |   15    |   16    |   17    |   18    |   19    |
// |   20    |   21    |   22    |   23    |   24    |   25    |   26    |   27    |   28    |   29    |
// |   30    |                   |   31    |   32    |   33    |   34    |                   |   35    |

        BASE_layer {
            label= "BASE";
            bindings = <
                &kp DE_Q       &kp DE_W        &kp DE_E          &kp DE_R           &kp DE_T        &kp DE_Y   &kp DE_U        &kp DE_I       &kp DE_O      &kp DE_P
                &hl LGUI DE_A  &hl LALT DE_S   &hl LCTRL DE_D    &hl LSHFT DE_F     &kp DE_G        &kp DE_H   &hr RSHFT DE_J &hr RCTRL DE_K &hr RALT DE_L  &hr RGUI DE_SEMI
                &kp DE_Z       &kp DE_X        &kp DE_C          &kp DE_V           &kp DE_B        &kp DE_N   &kp DE_M       &kp DE_COMMA   &kp DE_DOT     &kp DE_FSLH
                &kp DEL                                 &lt 1 TAB       &kp SPACE   &kp ENTER       &lt 2 BSPC                                              &kp DE_BSLS
                        >;
        };


        NUM_layer {
            label= "NUM";
            bindings = <
                &kp ESC      &kp PIPE        &kp UP           &trans             &kp DE_LPAR  &kp DE_RPAR      &kp N7       &kp N8       &kp N9         &kp DE_PLUS
                &kp LSHFT    &kp LEFT        &kp DOWN         &kp RIGHT          &kp DE_LBRC  &kp DE_LBRC      &kp N4       &kp N5       &kp N6         &kp DE_MINUS
                &kp DEL      &kp PAGE_UP     &kp LC(C)        &kp LC(V)          &kp DE_LCBR  &kp DE_RCBR      &kp N1       &kp N2       &kp N3         &kp DOT 
                                        &trans        &trans        &trans       &kp N0       &kp BSPC                                                  &kp DE_UNDS
            >;
        };

        

        SYM_layer {
            label= "SYM";
            bindings = <
                &kp DE_EXCL    &kp DE_AT     &kp DE_HASH    &kp DE_DLLR       &kp DE_PRCNT    &kp DE_GRAVE    &kp DE_AMPS     &kp LS(N2)      &kp DE_EQUAL   &kp DE_ASTRK         
                &kp DE_ADIA    &kp DE_SS     &trans         &trans            &trans          &trans          &kp C_MUTE      &trans          &kp DE_ODIA    &kp DE_UDIA
                &trans         &trans        &kp LC(C)      &kp LC(V)         &trans          &kp C_VOL_DN    &kp C_VOL_UP    &kp C_PREVIOUS  &kp C_NEXT     &kp BACKSLASH
                &kp PRINTSCREEN                             &mo 3          &trans             &trans      &trans                                             &trans
            >;
        };
    };
};
